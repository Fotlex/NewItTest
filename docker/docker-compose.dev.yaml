services:
  db:
    image: postgres:17-alpine
    container_name: db
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    env_file:
      - ../.env
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_DB}"]
      interval: 5s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7-alpine
    container_name: redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    env_file:
      - ../.env
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 1s
      timeout: 3s
      retries: 5
      start_period: 5s

  backend:
    build:
      context: ..
      dockerfile: docker/dockerfiles/python/dev.Dockerfile
    container_name: backend
    command: python backend/manage.py runserver 0.0.0.0:8000
    volumes:
      - ../:/app
      - static_volume:/app/backend/static_root
      - media_volume:/app/backend/media
    expose:
      - 8000
    env_file:
      - ../.env
    environment:
      - PYTHONPATH=/app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
  
  nginx:
    image: nginx:1.27.5-alpine
    container_name: nginx
    ports:
      - "80:80"
    volumes:
      - ./nginx/dev.conf:/etc/nginx/templates/default.conf.template:ro
      - static_volume:/app/backend/static_root:ro
      - media_volume:/app/backend/media:ro
    env_file: ../.env
    environment:
      NGINX_PORT: 80
      BACKEND_PORT: 8000
      ALLOWED_HOSTS: ${ALLOWED_HOSTS}
    depends_on:
      backend:
        condition: service_started

volumes:
  postgres_data:
  redis_data:
  static_volume:
  media_volume:
